/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IBallotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCategory"
      | "addvotingCategories"
      | "delegate"
      | "getVotingCategories"
      | "giveRightToVote"
      | "vote"
      | "winningCategory"
      | "winningCategoryName"
      | "withdrawDelegation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addCategory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addvotingCategories",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "giveRightToVote",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "winningCategory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "winningCategoryName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDelegation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addvotingCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveRightToVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningCategoryName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelegation",
    data: BytesLike
  ): Result;
}

export interface IBallot extends BaseContract {
  connect(runner?: ContractRunner | null): IBallot;
  waitForDeployment(): Promise<this>;

  interface: IBallotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCategory: TypedContractMethod<[_name: string], [void], "nonpayable">;

  addvotingCategories: TypedContractMethod<
    [_names: string[]],
    [void],
    "nonpayable"
  >;

  delegate: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getVotingCategories: TypedContractMethod<[], [string[]], "view">;

  giveRightToVote: TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  vote: TypedContractMethod<
    [_CategoryIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  winningCategory: TypedContractMethod<[], [bigint], "view">;

  winningCategoryName: TypedContractMethod<[], [string], "view">;

  withdrawDelegation: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCategory"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addvotingCategories"
  ): TypedContractMethod<[_names: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getVotingCategories"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "giveRightToVote"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[_CategoryIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "winningCategory"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "winningCategoryName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawDelegation"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}

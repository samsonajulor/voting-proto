/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MultisigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admins"
      | "approvals"
      | "isAdmin"
      | "requiredApprovals"
      | "transactionCount"
      | "transactions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfirmTransaction"
      | "Deposit"
      | "ExecuteTransaction"
      | "RevokeApproval"
      | "SubmitTransaction"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "admins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvals",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requiredApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace ConfirmTransactionEvent {
  export type InputTuple = [admin: AddressLike, txIndex: BigNumberish];
  export type OutputTuple = [admin: string, txIndex: bigint];
  export interface OutputObject {
    admin: string;
    txIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [sender: string, amount: bigint, balance: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteTransactionEvent {
  export type InputTuple = [admin: AddressLike, txIndex: BigNumberish];
  export type OutputTuple = [admin: string, txIndex: bigint];
  export interface OutputObject {
    admin: string;
    txIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeApprovalEvent {
  export type InputTuple = [admin: AddressLike, txIndex: BigNumberish];
  export type OutputTuple = [admin: string, txIndex: bigint];
  export interface OutputObject {
    admin: string;
    txIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitTransactionEvent {
  export type InputTuple = [
    admin: AddressLike,
    txIndex: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    admin: string,
    txIndex: bigint,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    admin: string;
    txIndex: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Multisig extends BaseContract {
  connect(runner?: ContractRunner | null): Multisig;
  waitForDeployment(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admins: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  approvals: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isAdmin: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  requiredApprovals: TypedContractMethod<[], [bigint], "view">;

  transactionCount: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        to: string;
        amount: bigint;
        approvals: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "approvals"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "requiredApprovals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        to: string;
        amount: bigint;
        approvals: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ConfirmTransaction"
  ): TypedContractEvent<
    ConfirmTransactionEvent.InputTuple,
    ConfirmTransactionEvent.OutputTuple,
    ConfirmTransactionEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteTransaction"
  ): TypedContractEvent<
    ExecuteTransactionEvent.InputTuple,
    ExecuteTransactionEvent.OutputTuple,
    ExecuteTransactionEvent.OutputObject
  >;
  getEvent(
    key: "RevokeApproval"
  ): TypedContractEvent<
    RevokeApprovalEvent.InputTuple,
    RevokeApprovalEvent.OutputTuple,
    RevokeApprovalEvent.OutputObject
  >;
  getEvent(
    key: "SubmitTransaction"
  ): TypedContractEvent<
    SubmitTransactionEvent.InputTuple,
    SubmitTransactionEvent.OutputTuple,
    SubmitTransactionEvent.OutputObject
  >;

  filters: {
    "ConfirmTransaction(address,uint256)": TypedContractEvent<
      ConfirmTransactionEvent.InputTuple,
      ConfirmTransactionEvent.OutputTuple,
      ConfirmTransactionEvent.OutputObject
    >;
    ConfirmTransaction: TypedContractEvent<
      ConfirmTransactionEvent.InputTuple,
      ConfirmTransactionEvent.OutputTuple,
      ConfirmTransactionEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ExecuteTransaction(address,uint256)": TypedContractEvent<
      ExecuteTransactionEvent.InputTuple,
      ExecuteTransactionEvent.OutputTuple,
      ExecuteTransactionEvent.OutputObject
    >;
    ExecuteTransaction: TypedContractEvent<
      ExecuteTransactionEvent.InputTuple,
      ExecuteTransactionEvent.OutputTuple,
      ExecuteTransactionEvent.OutputObject
    >;

    "RevokeApproval(address,uint256)": TypedContractEvent<
      RevokeApprovalEvent.InputTuple,
      RevokeApprovalEvent.OutputTuple,
      RevokeApprovalEvent.OutputObject
    >;
    RevokeApproval: TypedContractEvent<
      RevokeApprovalEvent.InputTuple,
      RevokeApprovalEvent.OutputTuple,
      RevokeApprovalEvent.OutputObject
    >;

    "SubmitTransaction(address,uint256,address,uint256)": TypedContractEvent<
      SubmitTransactionEvent.InputTuple,
      SubmitTransactionEvent.OutputTuple,
      SubmitTransactionEvent.OutputObject
    >;
    SubmitTransaction: TypedContractEvent<
      SubmitTransactionEvent.InputTuple,
      SubmitTransactionEvent.OutputTuple,
      SubmitTransactionEvent.OutputObject
    >;
  };
}

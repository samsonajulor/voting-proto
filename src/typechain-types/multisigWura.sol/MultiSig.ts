/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MultiSig {
  export type TransactionStruct = {
    spender: AddressLike;
    amount: BigNumberish;
    numberOfApproval: BigNumberish;
    isActive: boolean;
  };

  export type TransactionStructOutput = [
    spender: string,
    amount: bigint,
    numberOfApproval: bigint,
    isActive: boolean
  ] & {
    spender: string;
    amount: bigint;
    numberOfApproval: bigint;
    isActive: boolean;
  };
}

export interface MultiSigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AprroveTransaction"
      | "calculateMinimumApproval"
      | "createTransaction"
      | "getTransaction"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Create"): EventFragment;

  encodeFunctionData(
    functionFragment: "AprroveTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMinimumApproval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTransaction",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AprroveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMinimumApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
}

export namespace CreateEvent {
  export type InputTuple = [
    who: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [who: string, spender: string, amount: bigint];
  export interface OutputObject {
    who: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiSig extends BaseContract {
  connect(runner?: ContractRunner | null): MultiSig;
  waitForDeployment(): Promise<this>;

  interface: MultiSigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AprroveTransaction: TypedContractMethod<
    [id: BigNumberish],
    [void],
    "nonpayable"
  >;

  calculateMinimumApproval: TypedContractMethod<[], [bigint], "view">;

  createTransaction: TypedContractMethod<
    [amount: BigNumberish, _spender: AddressLike],
    [void],
    "nonpayable"
  >;

  getTransaction: TypedContractMethod<
    [id: BigNumberish],
    [MultiSig.TransactionStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AprroveTransaction"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateMinimumApproval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createTransaction"
  ): TypedContractMethod<
    [amount: BigNumberish, _spender: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [id: BigNumberish],
    [MultiSig.TransactionStructOutput],
    "view"
  >;

  getEvent(
    key: "Create"
  ): TypedContractEvent<
    CreateEvent.InputTuple,
    CreateEvent.OutputTuple,
    CreateEvent.OutputObject
  >;

  filters: {
    "Create(address,address,uint256)": TypedContractEvent<
      CreateEvent.InputTuple,
      CreateEvent.OutputTuple,
      CreateEvent.OutputObject
    >;
    Create: TypedContractEvent<
      CreateEvent.InputTuple,
      CreateEvent.OutputTuple,
      CreateEvent.OutputObject
    >;
  };
}
